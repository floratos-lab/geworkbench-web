package org.geworkbenchweb.genspace.ui.component;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.geworkbench.components.genspace.server.stubs.User;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Window.Notification;
import com.vaadin.ui.Window;

public class GenSpaceProfile extends AbstractGenspaceTab implements GenSpaceTab, ClickListener{
	/**
	 * 
	 */
	private static final long serialVersionUID = 2423023056743266075L;
	@AutoGenerated
	private GridLayout mainLayout;
	@AutoGenerated
	private Button btnSave;
	@AutoGenerated
	private TextField zipcode;
	@AutoGenerated
	private Label label_10;
	@AutoGenerated
	private TextField state;
	@AutoGenerated
	private Label label_9;
	@AutoGenerated
	private TextField city;
	@AutoGenerated
	private Label label_8;
	@AutoGenerated
	private TextField addr2;
	@AutoGenerated
	private Label label_7;
	@AutoGenerated
	private TextField addr1;
	@AutoGenerated
	private Label label_6;
	@AutoGenerated
	private TextField phone;
	@AutoGenerated
	private Label label_5;
	@AutoGenerated
	private TextField email;
	@AutoGenerated
	private Label label_4;
	@AutoGenerated
	private TextField labaff;
	@AutoGenerated
	private Label label_3;
	@AutoGenerated
	private TextField lname;
	@AutoGenerated
	private Label label_2;
	@AutoGenerated
	private TextField fname;
	@AutoGenerated
	private Label label_1;
	
	private VerticalLayout v = new VerticalLayout();

	@Override
	public void loggedIn() {
		User u = login.getGenSpaceServerFactory().getUser();
		if (u == null) {
			return;
		}
		addr1.setValue(u.getAddr1());
		addr2.setValue(u.getAddr2());
		city.setValue(u.getCity());
		email.setValue(u.getEmail());
		fname.setValue(u.getFirstName());
		lname.setValue(u.getLastName());
		labaff.setValue(u.getLabAffiliation());
		phone.setValue(u.getPhone());
		state.setValue(u.getState());
		zipcode.setValue(u.getZipcode());
	}
	@Override
	public void loggedOut() {
		
	}
	@Override
	public void tabSelected() {
		
	}
		
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */ 
	public GenSpaceProfile(final GenSpaceLogin_1 login) {
		super(login);
		buildMainLayout();
		loggedIn();
		
		setCompositionRoot(v);

		btnSave.addListener(new Button.ClickListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				User me = login.getGenSpaceServerFactory().getUser();
				me.setAddr1((String) addr1.getValue());
				me.setAddr2((String) addr2.getValue());
				me.setCity((String) city.getValue());
				me.setEmail((String) email.getValue());
				me.setFirstName((String) fname.getValue());
				me.setLastName((String) lname.getValue());
				me.setLabAffiliation((String) labaff.getValue());
				me.setPhone((String) phone.getValue());
				me.setState((String) state.getValue());
				me.setZipcode((String) zipcode.getValue());
				login.getGenSpaceServerFactory().getUserOps().updateUser(me);
			}
		});
	}

	@SuppressWarnings("deprecation")
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		
		mainLayout = new GridLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("-1px");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setColumns(4);
		mainLayout.setRows(5);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("-1px");
		setHeight("100.0%");
		
		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("First Name");
		mainLayout.addComponent(label_1, 0, 0);
		
		// textField_1
		fname = new TextField();
		fname.setImmediate(false);
		fname.setWidth("-1px");
		fname.setHeight("-1px");
		fname.setSecret(false);
		mainLayout.addComponent(fname, 1, 0);
		
		// label_2
		label_2 = new Label();
		label_2.setImmediate(false);
		label_2.setWidth("-1px");
		label_2.setHeight("16px");
		label_2.setValue("Last Name");
		mainLayout.addComponent(label_2, 2, 0);
		
		// textField_2
		lname = new TextField();
		lname.setImmediate(false);
		lname.setWidth("-1px");
		lname.setHeight("-1px");
		lname.setSecret(false);
		mainLayout.addComponent(lname, 3, 0);
		
		// label_3
		label_3 = new Label();
		label_3.setImmediate(false);
		label_3.setWidth("-1px");
		label_3.setHeight("-1px");
		label_3.setValue("Lab Affiliation");
		mainLayout.addComponent(label_3, 0, 1);
		
		// textField_11
		labaff = new TextField();
		labaff.setImmediate(false);
		labaff.setWidth("-1px");
		labaff.setHeight("-1px");
		labaff.setSecret(false);
		mainLayout.addComponent(labaff, 1, 1);
		
		// label_4
		label_4 = new Label();
		label_4.setImmediate(false);
		label_4.setWidth("-1px");
		label_4.setHeight("-1px");
		label_4.setValue("Email Address");
		mainLayout.addComponent(label_4, 2, 1);
		
		// textField_12
		email = new TextField();
		email.setImmediate(false);
		email.setWidth("-1px");
		email.setHeight("-1px");
		email.setSecret(false);
		mainLayout.addComponent(email, 3, 1);
		
		// label_5
		label_5 = new Label();
		label_5.setImmediate(false);
		label_5.setWidth("-1px");
		label_5.setHeight("-1px");
		label_5.setValue("Phone");
		mainLayout.addComponent(label_5, 0, 2);
		
		// textField_13
		phone = new TextField();
		phone.setImmediate(false);
		phone.setWidth("-1px");
		phone.setHeight("-1px");
		phone.setSecret(false);
		mainLayout.addComponent(phone, 1, 2);
		
		// label_6
		label_6 = new Label();
		label_6.setImmediate(false);
		label_6.setWidth("-1px");
		label_6.setHeight("-1px");
		label_6.setValue("Address 1");
		mainLayout.addComponent(label_6, 2, 2);
		
		// textField_14
		addr1 = new TextField();
		addr1.setImmediate(false);
		addr1.setWidth("-1px");
		addr1.setHeight("-1px");
		addr1.setSecret(false);
		mainLayout.addComponent(addr1, 3, 2);
		
		// label_7
		label_7 = new Label();
		label_7.setImmediate(false);
		label_7.setWidth("-1px");
		label_7.setHeight("-1px");
		label_7.setValue("Address 2");
		mainLayout.addComponent(label_7, 0, 3);
		
		// textField_15
		addr2 = new TextField();
		addr2.setImmediate(false);
		addr2.setWidth("-1px");
		addr2.setHeight("-1px");
		addr2.setSecret(false);
		mainLayout.addComponent(addr2, 1, 3);
		
		// label_8
		label_8 = new Label();
		label_8.setImmediate(false);
		label_8.setWidth("-1px");
		label_8.setHeight("-1px");
		label_8.setValue("City");
		mainLayout.addComponent(label_8, 2, 3);
		
		// textField_16
		city = new TextField();
		city.setImmediate(false);
		city.setWidth("-1px");
		city.setHeight("-1px");
		city.setSecret(false);
		mainLayout.addComponent(city, 3, 3);
		
		// label_9
		label_9 = new Label();
		label_9.setImmediate(false);
		label_9.setWidth("-1px");
		label_9.setHeight("-1px");
		label_9.setValue("State");
		mainLayout.addComponent(label_9, 0, 4);
		
		// textField_17
		state = new TextField();
		state.setImmediate(false);
		state.setWidth("-1px");
		state.setHeight("-1px");
		state.setSecret(false);
		mainLayout.addComponent(state, 1, 4);
		
		// label_10
		label_10 = new Label();
		label_10.setImmediate(false);
		label_10.setWidth("-1px");
		label_10.setHeight("-1px");
		label_10.setValue("Zip Code");
		mainLayout.addComponent(label_10, 2, 4);
		
		// textField_18
		zipcode = new TextField();
		zipcode.setImmediate(false);
		zipcode.setWidth("-1px");
		zipcode.setHeight("-1px");
		zipcode.setSecret(false);
		mainLayout.addComponent(zipcode, 3, 4);
		v.setSpacing(true);
		v.addComponent(new Label("")); 
		v.addComponent(mainLayout);
		 
		// btnSave
		btnSave = new Button();
		btnSave.setCaption("Save");
		btnSave.setImmediate(false);
		btnSave.setWidth("-1px");
		btnSave.setHeight("-1px");		
		v.addComponent(btnSave);
		btnSave.addListener(this);
		return v;
	}
	
	private void applyProfileChanges() {
		login.getGenSpaceServerFactory().getUser().setFirstName((String) fname.getValue());
		login.getGenSpaceServerFactory().getUser().setLastName((String) lname.getValue());
		login.getGenSpaceServerFactory().getUser().setLabAffiliation((String) labaff.getValue());
		login.getGenSpaceServerFactory().getUser().setEmail((String) email.getValue());
		login.getGenSpaceServerFactory().getUser().setPhone((String) phone.getValue());
		login.getGenSpaceServerFactory().getUser().setAddr1((String) addr1.getValue());
		login.getGenSpaceServerFactory().getUser().setAddr2((String) addr2.getValue());
		login.getGenSpaceServerFactory().getUser().setCity((String) city.getValue());
		login.getGenSpaceServerFactory().getUser().setState((String) state.getValue());
		login.getGenSpaceServerFactory().getUser().setZipcode((String) zipcode.getValue());
	}

	@Override
	public void buttonClick(ClickEvent e) {
		btnSave.setEnabled(false);
		Window mainWindow = getApplication().getMainWindow();
		try {
			StringBuffer errMsg = new StringBuffer();
			if (isValid(errMsg)) {
				applyProfileChanges();							
				// System.out.println("valid");
				if (login.getGenSpaceServerFactory().userUpdate()) {
					String msg = "Information updated";

					mainWindow.showNotification(msg, Notification.TYPE_TRAY_NOTIFICATION);
					// System.out.println("information updated");
				} else {
					String msg = "Information update failed";

					mainWindow.showNotification(msg, Notification.TYPE_ERROR_MESSAGE);

				}
			}

			else {
				mainWindow.showNotification("Error Information",
						errMsg.toString(), Notification.TYPE_ERROR_MESSAGE);
			}
		} catch (Exception ex) {
		}
		btnSave.setEnabled(true);
	}

	private boolean empty(String str) {
		if ("".equalsIgnoreCase(str) || null == str)
			return true;
		else
			return false;
	}

	public boolean isValid(StringBuffer msg) {

		String labaffStr = (String) labaff.getValue();
		boolean valid = true;

		if (empty(labaffStr)) {
			msg.append("Lab affiliation cannot be empty\n");
			valid = false;
		}

		Pattern pattern;
		Matcher matcher;

		// Phone number validation
		if (!empty((String) phone.getValue())) {
			pattern = Pattern.compile("[^0-9a-zA-Z()-]");

			matcher = pattern.matcher((String) phone.getValue());

			if (matcher.find()) {
				msg.append("Phone number contains invalid characters\n");
				valid = false;
			}
		}
		// email validation
		if (!empty((String) email.getValue())) {
			pattern = Pattern.compile("[0-9a-zA-Z()-_.]+@[0-9a-zA-Z()-_.]+");

			matcher = pattern.matcher((String) email.getValue());
			if (!matcher.find()) {
				msg.append("Invalid Email.\n");
				valid = false;
			}

		}
		return valid;
	}

}
